CREATE DATABASE productanalysis;

 USE  productanalysis;
 
 # DROP TABLE product_category_info;
 
 CREATE TABLE transactions
 (transaction_id BIGINT NOT NULL,
 cust_id BIGINT NOT NULL,
 tran_date DATE NOT NULL,
 prod_subcat_code INT NOT NULL,
 prod_cat_code INT NOT NULL,
 Qty INT NOT NULL,
 Rate INT NOT NULL,
 Tax DECIMAL NOT NULL,
 total_amt DECIMAL NOT NULL,
 Store_type VARCHAR(100) NOT NULL
 );
 
 
 CREATE TABLE customers
 (customer_id BIGINT NOT NULL,
 DOB DATE NOT NULL,
 Gender VARCHAR(5) NOT NULL,
 city_code INT NOT NULL
 );
 
 CREATE TABLE product_category_info
 (prod_cat_code INT NOT NULL,
 prod_cat VARCHAR(50) NOT NULL,
 prod_sub_cat_code INT NOT NULL,
 prod_subcat VARCHAR(50) NOT NULL
 );
 
 SELECT * FROM transactions;
 
SELECT * FROM customers;

SELECT * FROM product_category_info;

#Question:

#1.List all transactions made by customers along with their total amount.
SELECT 
    transaction_id, cust_id, total_amt
FROM
    transactions;

#2.Fetch the details of all female customers from the customer table.
 SELECT 
    *
FROM
    customers
WHERE
    Gender = 'F';
 
#3.Find all transactions where the total amount is greater than 5000.
SELECT 
    *
FROM
    transactions
WHERE
    total_amt > 5000;

#4.Get the total quantity of products sold in each product category.
SELECT 
    p.prod_cat, COUNT(t.Qty) AS total_quantity
FROM
    product_category_info AS p
        INNER JOIN
    transactions AS t ON p.prod_cat_code = t.prod_cat_code
GROUP BY p.prod_cat;

#5.Find the number of customers from each city.
SELECT 
    city_code, COUNT(*) AS total_customers
FROM
    customers
GROUP BY city_code;
 
#6.Calculate the total revenue generated by each store type.
SELECT 
    store_type, SUM(total_amt) AS total_revenue
FROM
    transactions
GROUP BY store_type;

#7.Retrieve all transactions made by customers born after 1990.
SELECT 
    t.*
FROM
    transactions AS t
        INNER JOIN
    customers AS c ON t.cust_id = c.customer_id
WHERE
    YEAR(c.DOB) > 1990;

#8.Find the most sold product sub-category.
SELECT 
    p.prod_subcat, SUM(t.Qty) AS total_sold
FROM
    product_category_info AS p
        INNER JOIN
    transactions AS t ON t.prod_subcat_code = p.prod_sub_cat_code
GROUP BY p.prod_subcat
ORDER BY total_sold DESC
LIMIT 1;

#9.List the total tax collected for each product category.
SELECT 
    p.prod_cat, SUM(t.Tax) AS total_tax
FROM
    product_category_info AS p
        INNER JOIN
    transactions AS t ON p.prod_cat_code = t.prod_cat_code
GROUP BY p.prod_cat;

#10. Find all transactions where the rate is higher than the average rate of all products.
SELECT 
    *
FROM
    transactions
WHERE
    Rate > (SELECT 
            AVG(Rate)
        FROM
            transactions);

#11.Display customer details along with the total amount they have spent.
SELECT 
    c.customer_id,
    c.Gender,
    c.city_code,
    SUM(t.total_amt) AS Total_amount_spent
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
GROUP BY c.customer_id , c.Gender , c.city_code;

#12. Get the details of the top 3 customers who spent the most.
SELECT 
    c.customer_id, SUM(t.total_amt) AS Total_amount_spent
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
GROUP BY c.customer_id
ORDER BY Total_amount_spent DESC
LIMIT 3;

#Medium:

#1. Find the total revenue generated by each city and store type.
SELECT 
    c.city_code AS city,
    t.store_type AS storetype,
    SUM(t.total_amt) AS Total_revenue
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
GROUP BY city , storetype;

#2. Find the customers who have purchased products from more than 2 different product categories.
SELECT 
    t.cust_id,
    COUNT(DISTINCT p.prod_cat) AS product_category_count
FROM
    transactions AS t
        INNER JOIN
    product_category_info AS p ON t.prod_cat_code = p.prod_cat_code
GROUP BY t.cust_id
HAVING product_category_count > 2;

#3. Identify the product sub-category that generates the highest revenue.
SELECT 
    p.prod_subcat, SUM(t.total_amt) AS highest_revenue
FROM
    product_category_info AS p
        INNER JOIN
    transactions AS t ON p.prod_sub_cat_code = t.prod_subcat_code
GROUP BY p.prod_subcat
ORDER BY highest_revenue DESC
LIMIT 1;

#4. List all customers who have made transactions worth more than 10,000 in total.
SELECT 
    c.customer_id, SUM(t.total_amt) AS Total
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
GROUP BY c.customer_id
HAVING total > 10000;

#5. Find the total quantity of products sold in each city.
SELECT 
    c.city_code, SUM(t.qty) AS total_quantity_sold
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
GROUP BY c.city_code;

#6. Retrieve the details of customers who have purchased from all product categories.
SELECT 
    t.cust_id
FROM
    transactions AS t
        INNER JOIN
    product_category_info AS p ON t.prod_cat_code = p.prod_cat_code
GROUP BY t.cust_id
HAVING COUNT(DISTINCT p.prod_cat) = (SELECT 
        COUNT(DISTINCT prod_cat)
    FROM
        product_category_info);

#7. Find the average revenue per transaction for each store type.
SELECT 
    store_type, AVG(total_amt) AS revenue_per_transaction
FROM
    transactions
GROUP BY store_type;

#8. List the top 3 cities that generated the highest total revenue.
SELECT 
    c.city_code, SUM(t.total_amt) AS total_revenue
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
GROUP BY c.city_code
ORDER BY total_revenue DESC
LIMIT 3;

#9. Get the monthly revenue generated by each product category.
SELECT MONTH(t.tran_date)AS months,p.prod_cat,SUM(t.total_amt) AS monthly_revenue
FROM product_category_info AS p
INNER JOIN transactions AS t
ON p.prod_cat_code=t.prod_cat_code
GROUP BY months,p.prod_cat;

#10. Find the percentage of total revenue contributed by each product category.
SELECT 
    p.prod_cat,
    SUM(t.total_amt) AS category_amount,
    (SUM(t.total_amt) / (SELECT 
            SUM(total_amt)
        FROM
            transactions) * 100) AS percentage
FROM
    product_category_info AS p
        INNER JOIN
    transactions AS t ON p.prod_cat_code = t.prod_cat_code
GROUP BY p.prod_cat;

#11. List customers who have never made a transaction.
SELECT 
    c.*
FROM
    customers AS c
        LEFT JOIN
    transactions AS t ON c.customer_id = t.cust_id
WHERE
    t.cust_id IS NULL;
    
#12. Retrieve the details of the youngest customer who made a transaction.
SELECT 
    c.*
FROM
    customers AS c
        INNER JOIN
    transactions AS t ON c.customer_id = t.cust_id
ORDER BY c.DOB ASC
LIMIT 1;

#Advanced:

#1. Identify customers who have made transactions in every store type.
SELECT 
    t.cust_id
FROM
    transactions AS t
GROUP BY t.cust_id
HAVING COUNT(DISTINCT (t.store_type)) = (SELECT 
        COUNT(DISTINCT store_type)
    FROM
        transactions);

#2. Find the product sub-category with the highest average revenue per transaction.
SELECT 
    p.prod_subcat, AVG(t.total_amt) AS avg_revenue
FROM
    product_category_info AS p
        INNER JOIN
    transactions AS t ON p.prod_sub_cat_code = t.prod_subcat_code
GROUP BY p.prod_subcat
ORDER BY avg_revenue DESC
LIMIT 1; 

#3. Retrieve the top 3 customers who spent the most in each store type.
WITH RankedTransactions AS (
    SELECT t.store_type, t.cust_id, SUM(t.total_amt) AS total_spent,
           ROW_NUMBER() OVER (PARTITION BY t.store_type ORDER BY SUM(t.total_amt) DESC) AS ranks
    FROM transactions t
    GROUP BY t.store_type, t.cust_id
)
SELECT store_type, cust_id, total_spent
FROM RankedTransactions
WHERE ranks <= 3;

#4. Calculate the year-over-year revenue growth for each product category.
SELECT YEAR(t.tran_date)AS years,p.prod_cat,SUM(t.total_amt) AS yearly_revenue,
 LAG(SUM(t.total_amt)) OVER (PARTITION BY p.prod_cat ORDER BY YEAR(t.tran_date)) AS previous_year_revenue,
       (SUM(t.total_amt) - LAG(SUM(t.total_amt)) OVER (PARTITION BY p.prod_cat ORDER BY YEAR(t.tran_date))) / LAG(SUM(t.total_amt)) OVER (PARTITION BY p.prod_cat ORDER BY YEAR(t.tran_date)) * 100 AS revenue_growth
FROM transactions AS t
INNER JOIN product_category_info AS p
ON t.prod_cat_code=p.prod_cat_code
GROUP BY years,p.prod_cat;

#5. List the customers who have only ever purchased products from a single product category.
SELECT 
    t.cust_id
FROM
    transactions AS t
        INNER JOIN
    product_category_info AS p ON t.prod_cat_code = p.prod_cat_code
GROUP BY t.cust_id
HAVING COUNT(DISTINCT p.prod_cat) = 1;

#6. Identify the store type that has the highest revenue-to-tax ratio.
SELECT 
    store_type,
    (SUM(total_amt) / SUM(tax)) AS revenue_to_tax_ratio
FROM
    transactions
GROUP BY store_type
ORDER BY revenue_to_tax_ratio DESC
LIMIT 1;

#7. Find the most profitable product category in each city.
WITH CityCategoryRevenue AS (
    SELECT c.city_code, p.prod_cat, SUM(t.total_amt) AS total_revenue
    FROM transactions t
    JOIN customers c ON t.cust_id = c.customer_id
    JOIN product_category_info p ON t.prod_cat_code = p.prod_cat_code
    GROUP BY c.city_code, p.prod_cat
)
SELECT city_code, prod_cat, total_revenue
FROM CityCategoryRevenue
WHERE (city_code, total_revenue) IN (
    SELECT city_code, MAX(total_revenue)
    FROM CityCategoryRevenue
    GROUP BY city_code
);

#8. Determine which age group (e.g., 20-30, 30-40) contributes the most to revenue.
SELECT 
    FLOOR(DATEDIFF(CURDATE(), c.DOB) / 365 / 10) * 10 AS age_group,
    SUM(t.total_amt) AS total_revenue
FROM
    transactions t
        JOIN
    customers c ON t.cust_id = c.customer_id
GROUP BY age_group
ORDER BY total_revenue DESC
LIMIT 1;

#9. Find customers who have consistently made transactions every month in the last year.

WITH MonthlyTransactions AS (
    SELECT t.cust_id, MONTH(t.tran_date) AS month, YEAR(t.tran_date) AS year
    FROM transactions t
    WHERE t.tran_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
    GROUP BY t.cust_id, MONTH(t.tran_date), YEAR(t.tran_date)
)
SELECT cust_id
FROM MonthlyTransactions
GROUP BY cust_id
HAVING COUNT(DISTINCT CONCAT(year, '-', month)) = 12;

#10. Get the contribution of each city to the total revenue, expressed as a percentage.
SELECT 
    c.city_code,
    SUM(t.total_amt) AS city_revenue,
    (SUM(t.total_amt) / (SELECT 
            SUM(total_amt)
        FROM
            transactions) * 100) AS revenue_percentage
FROM
    transactions t
        JOIN
    customers c ON t.cust_id = c.customer_id
GROUP BY c.city_code
ORDER BY revenue_percentage DESC;








